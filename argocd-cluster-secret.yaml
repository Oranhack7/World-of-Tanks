apiVersion: v1
kind: Secret
metadata:
  name: argocd-cluster-secret
  namespace: argocd
  labels:
    argocd.argoproj.io/secret-type: cluster
type: Opaque
stringData:
  name: in-cluster
  config: |
    {
      "bearerToken": "",
      "tlsClientConfig": { "insecure": false },
      "awsAuthConfig": null,
      "execProviderConfig": null
    }
  server: https://kubernetes.default.svc
